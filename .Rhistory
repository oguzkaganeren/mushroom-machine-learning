stalk_color_below_ring + veil_color +
ring_number + ring_type + spore_print_color + population + habitat, data=mushroom, family="binomial")
#install.packages("arm")
library(arm)
fit <- bayesglm(edibility ~ cap_shape + cap_surface + cap_color + bruises + odor +
gill_attachement + gill_spacing + gill_size +
gill_color + stalk_shape + stalk_root +
stalk_surface_above_ring + stalk_surface_below_ring + stalk_color_above_ring +
stalk_color_below_ring + veil_color +
ring_number + ring_type + spore_print_color + population + habitat, data=mushroom, family="binomial")
summary(glm.fit)
fit <- bayesglm(edibility ~ cap_shape + cap_surface + cap_color + bruises + odor +  gill_spacing + gill_size +
gill_color + stalk_shape + stalk_root +
stalk_surface_above_ring + stalk_surface_below_ring + stalk_color_above_ring +
stalk_color_below_ring +
ring_number + ring_type + spore_print_color + population + habitat, data=mushroom, family="binomial")
summary(glm.fit)
summary(fit)
fit <- bayesglm(edibility ~ cap_shape + cap_surface + cap_color + bruises + odor +
gill_attachement + gill_spacing + gill_size +
gill_color + stalk_shape + stalk_root +
stalk_surface_above_ring + stalk_surface_below_ring + stalk_color_above_ring +
stalk_color_below_ring + veil_color +
ring_number + ring_type + spore_print_color + population + habitat, data=mushroom, family="binomial")
summary(fit)
glm.probs <- predict(glm.fit, type = "response")
# Logistics Regression training and test
#install.packages("corrplot")
library(caret)
glm.probs <- predict(fit, type = "response")
glm.probs[1:5]
fit <- bayesglm(edibility ~ cap_shape + cap_surface + cap_color + bruises + odor +
gill_attachement + gill_spacing + gill_size +
gill_color + stalk_shape + stalk_root +
stalk_surface_above_ring + stalk_surface_below_ring + stalk_color_above_ring +
stalk_color_below_ring + veil_color +
ring_number + ring_type + spore_print_color + population + habitat, data=mushroom, family="binomial")
summary(fit)
glm.probs <- predict(fit, type = "response")
glm.probs[1:5]
fit <- bayesglm(edibility ~ cap_shape + cap_surface + cap_color + bruises + odor +
gill_attachement + gill_spacing + gill_size +
gill_color + stalk_shape + stalk_root +
stalk_surface_above_ring + stalk_surface_below_ring + stalk_color_above_ring +
stalk_color_below_ring +
ring_number + ring_type + spore_print_color + population + habitat, data=mushroom, family="binomial")
fit <- bayesglm(edibility ~ cap_shape + cap_surface + cap_color + bruises + odor +
gill_spacing + gill_size +
gill_color + stalk_shape + stalk_root +
stalk_surface_above_ring + stalk_surface_below_ring + stalk_color_above_ring +
stalk_color_below_ring +
ring_number + ring_type + spore_print_color + population + habitat, data=mushroom, family="binomial")
summary(fit)
glm.probs <- predict(fit, type = "response")
glm.probs[1:5]
glm.pred <- ifelse(glm.probs > 7, "Poison", "edibility")
attach(mushroom)
table(glm.pred,edibility)
summary(fit)
display(fit)
summary(fit)
fit <- bayesglm(edibility ~ cap_shape + cap_surface + cap_color + bruises + odor +
gill_spacing + gill_size +
gill_color + stalk_shape + stalk_root +
stalk_surface_above_ring + stalk_surface_below_ring + stalk_color_above_ring +
stalk_color_below_ring +
ring_number + ring_type + spore_print_color + population + habitat, data=mushroom, family="binomial",control=glm.control(maxit=1))
summary(fit)
fit <- bayesglm(edibility ~ cap_shape + cap_surface + cap_color + bruises + odor +
gill_spacing + gill_size + veil_color + gill_attachement
gill_color + stalk_shape + stalk_root +
stalk_surface_above_ring + stalk_surface_below_ring + stalk_color_above_ring +
stalk_color_below_ring +
ring_number + ring_type + spore_print_color + population + habitat, data=mushroom, family="binomial",control=glm.control(maxit=1))
fit <- glm(edibility ~ cap_shape + cap_surface + cap_color + bruises + odor +
gill_spacing + gill_size + veil_color + gill_attachement
gill_color + stalk_shape + stalk_root +
stalk_surface_above_ring + stalk_surface_below_ring + stalk_color_above_ring +
stalk_color_below_ring +
ring_number + ring_type + spore_print_color + population + habitat, data=mushroom, family="binomial",control=glm.control(maxit=1))
fit <- bayesglm(edibility ~ cap_shape + cap_surface + cap_color + bruises + odor +
gill_spacing + gill_size + veil_color + gill_attachement +
gill_color + stalk_shape + stalk_root +
stalk_surface_above_ring + stalk_surface_below_ring + stalk_color_above_ring +
stalk_color_below_ring +
ring_number + ring_type + spore_print_color + population + habitat, data=mushroom, family="binomial",control=glm.control(maxit=1))
summary(fit)
glm.probs <- predict(fit, type = "response")
glm.probs[1:5]
glm.pred <- ifelse(glm.probs > 7, "Poison", "edibility")
attach(mushroom)
table(glm.pred,edibility)
mean(glm.pred == edibility)
glm.pred <- ifelse(glm.probs > 7, "Poison", "edibility")
mean(glm.pred == edibility)
fit <- bayesglm(edibility ~ cap_shape + cap_surface + cap_color + bruises + odor +
gill_spacing + gill_size +
gill_color + stalk_shape + stalk_root +
stalk_surface_above_ring + stalk_surface_below_ring + stalk_color_above_ring +
stalk_color_below_ring +
ring_number + ring_type + spore_print_color + population + habitat, data=mushroom, family="binomial")
glm.probs <- predict(fit, type = "response")
glm.probs[1:5]
glm.pred <- ifelse(glm.probs > 7, "Poison", "edibility")
mean(glm.pred == edibility)
table(glm.pred,edibility)
mean(glm.pred == e)
mean(glm.pred == edibility)
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
install.packages("mlr")
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
View(mush)
#show current dataset
head(dataset)
summary(dataset)
#install.packages("Amelia")
#library(Amelia)
columnNames <- c(
"class", "cap_shape", "cap_surface",
"cap_color", "bruises", "odor",
"gill_attachement", "gill_spacing", "gill_size",
"gill_color", "stalk_shape", "stalk_root",
"stalk_surface_above_ring", "stalk_surface_below_ring", "stalk_color_above_ring",
"stalk_color_below_ring", "veil_type", "veil_color",
"ring_number", "ring_type", "spore_print_color",
"population", "habitat")
#include dataset from disk
mushroom <- read.table("agaricus-lepiota.data",
sep = ",",
na.strings = "?",
colClasses = NA,
header = FALSE,
col.names= columnNames
) # there are missing value so it gets warning
#unique(mushroom$veil_type)
#missmap(mushroom, main = "Missing values vs observed")
#replace NA values to columns mode
Mode <- function (x, na.rm) {
xtab <- table(x)
xmode <- names(which(xtab == max(xtab)))
if (length(xmode) > 1) xmode <- ">1 mode"
return(xmode)
}
for (var in 1:ncol(mushroom)) {
mushroom[is.na(mushroom[,var]),var] <- Mode(mushroom[,var], na.rm = TRUE)
}
#after data preparation of missing values.
#missmap(mushroom, main = "After data preparation of missing values")
drops <- c("veil_type") #there is one unique values of veil_type, we can remove this column in our dataset.
mushroom <- mushroom[ , !(names(mushroom) %in% drops)] #remove veil_type
#head(mushroom) # without numeric values, pure non preparing
View(mushroom)
library(mlr)
mush <- createDummyFeatures(mushroom[2:22])
mush$class <- mushroom$class
head(mush)
#head(mushroom) # list the dataset after fill missing values, categoricial to numericial, and normalization.
# remove unncessary data
rm(columnNames,drops,var,Mode, mushroom)
View(mush)
train_index <- sample(1:nrow(mush), size=nrow(mush)*0.8) # randomly choice rows
test  <- mush[-train_index,]
train <- mush[train_index,]
try1 = glm(formula = class ~ ., data = mush, family = "binomial")
summary(try1)
#install.packages("Amelia")
#library(Amelia)
columnNames <- c(
"class", "cap_shape", "cap_surface",
"cap_color", "bruises", "odor",
"gill_attachement", "gill_spacing", "gill_size",
"gill_color", "stalk_shape", "stalk_root",
"stalk_surface_above_ring", "stalk_surface_below_ring", "stalk_color_above_ring",
"stalk_color_below_ring", "veil_type", "veil_color",
"ring_number", "ring_type", "spore_print_color",
"population", "habitat")
#include dataset from disk
mushroom <- read.table("agaricus-lepiota.data",
sep = ",",
na.strings = "?",
colClasses = NA,
header = FALSE,
col.names= columnNames
) # there are missing value so it gets warning
#unique(mushroom$veil_type)
#missmap(mushroom, main = "Missing values vs observed")
#replace NA values to columns mode
Mode <- function (x, na.rm) {
xtab <- table(x)
xmode <- names(which(xtab == max(xtab)))
if (length(xmode) > 1) xmode <- ">1 mode"
return(xmode)
}
for (var in 1:ncol(mushroom)) {
mushroom[is.na(mushroom[,var]),var] <- Mode(mushroom[,var], na.rm = TRUE)
}
#after data preparation of missing values.
#missmap(mushroom, main = "After data preparation of missing values")
drops <- c("veil_type") #there is one unique values of veil_type, we can remove this column in our dataset.
mushroom <- mushroom[ , !(names(mushroom) %in% drops)] #remove veil_type
#head(mushroom) # without numeric values, pure non preparing
## categoric to numeric without target
View(mushroom)
library(mlr)
mush <- createDummyFeatures(mushroom[2:22])
mush$class <- mushroom$class
View(mush)
library(psycho)
install.packages(c("psycho", "tidyverse"))
library(dplyr)
dat2 <- mushroom %>% mutate_each_(funs(scale(.) %>% as.vector),
vars=columnNames)
dat2 <- mushroom %>% mutate_each_(funs(scale(.) %>% as.vector),
vars=columnNames)
#install.packages("Amelia")
#library(Amelia)
columnNames <- c(
"class", "cap_shape", "cap_surface",
"cap_color", "bruises", "odor",
"gill_attachement", "gill_spacing", "gill_size",
"gill_color", "stalk_shape", "stalk_root",
"stalk_surface_above_ring", "stalk_surface_below_ring", "stalk_color_above_ring",
"stalk_color_below_ring", "veil_type", "veil_color",
"ring_number", "ring_type", "spore_print_color",
"population", "habitat")
#include dataset from disk
mushroom <- read.table("agaricus-lepiota.data",
sep = ",",
na.strings = "?",
colClasses = NA,
header = FALSE,
col.names= columnNames
) # there are missing value so it gets warning
#unique(mushroom$veil_type)
#missmap(mushroom, main = "Missing values vs observed")
#replace NA values to columns mode
Mode <- function (x, na.rm) {
xtab <- table(x)
xmode <- names(which(xtab == max(xtab)))
if (length(xmode) > 1) xmode <- ">1 mode"
return(xmode)
}
for (var in 1:ncol(mushroom)) {
mushroom[is.na(mushroom[,var]),var] <- Mode(mushroom[,var], na.rm = TRUE)
}
dat2 <- mushroom %>% mutate_each_(funs(scale(.) %>% as.vector),
vars=columnNames)
dat2 <- mushroom %>% mutate_each_(funs(scale(.) %>% as.vector),
vars=columnNames[,2:23])
dat2 <- mushroom %>% mutate_each_(funs(scale(.) %>% as.vector),
vars=columnNames[2:23])
View(mushroom)
## categoric to numeric without target
library(mlr)
mush <- normalizeFeatures(mushroom[2:22])
View(mush)
mush <- normalizeFeatures(target = character(0L), method = "standardize",
cols = NULL, range = c(0, 1), on.constant = "quiet")
mush <- normalizeFeatures(mushroom[2:22],target = character(0L), method = "standardize",
cols = NULL, range = c(0, 1), on.constant = "quiet")
View(mush)
mush$class <- mushroom$class
for (var in 1:ncol(mushroom)) {
mushroom[is.na(mushroom[,var]),var] <- Mode(mushroom[,var], na.rm = TRUE)
}
head(mush)
mush <- normalizeFeatures(mushroom[2:22],target = character(0L), method = "standardize",
cols = NULL, range = c(0, 1), on.constant = "quiet")
mush$class <- mushroom$class
head(mush)
#install.packages("Amelia")
#library(Amelia)
columnNames <- c(
"class", "cap_shape", "cap_surface",
"cap_color", "bruises", "odor",
"gill_attachement", "gill_spacing", "gill_size",
"gill_color", "stalk_shape", "stalk_root",
"stalk_surface_above_ring", "stalk_surface_below_ring", "stalk_color_above_ring",
"stalk_color_below_ring", "veil_type", "veil_color",
"ring_number", "ring_type", "spore_print_color",
"population", "habitat")
#include dataset from disk
mushroom <- read.table("agaricus-lepiota.data",
sep = ",",
na.strings = "?",
colClasses = NA,
header = FALSE,
col.names= columnNames
) # there are missing value so it gets warning
#unique(mushroom$veil_type)
#missmap(mushroom, main = "Missing values vs observed")
#replace NA values to columns mode
Mode <- function (x, na.rm) {
xtab <- table(x)
xmode <- names(which(xtab == max(xtab)))
if (length(xmode) > 1) xmode <- ">1 mode"
return(xmode)
}
for (var in 1:ncol(mushroom)) {
mushroom[is.na(mushroom[,var]),var] <- Mode(mushroom[,var], na.rm = TRUE)
}
#after data preparation of missing values.
#missmap(mushroom, main = "After data preparation of missing values")
drops <- c("veil_type") #there is one unique values of veil_type, we can remove this column in our dataset.
mushroom <- mushroom[ , !(names(mushroom) %in% drops)] #remove veil_type
mushroom$cap_shape <- as.numeric(mushroom$cap_shape)
mushroom$cap_surface <- as.numeric(mushroom$cap_surface)
mushroom$cap_color <- as.numeric(mushroom$cap_color)
mushroom$bruises <- as.numeric(mushroom$bruises)
mushroom$odor <- as.numeric(mushroom$odor)
mushroom$gill_attachement <- as.numeric(mushroom$gill_attachement)
mushroom$gill_spacing <- as.numeric(mushroom$gill_spacing)
mushroom$gill_size <- as.numeric(mushroom$gill_size)
mushroom$gill_color <- as.numeric(mushroom$gill_color)
mushroom$stalk_shape <- as.numeric(mushroom$stalk_shape)
mushroom$stalk_root <- as.numeric(mushroom$stalk_root)
mushroom$stalk_surface_above_ring <- as.numeric(mushroom$cap_shape)
mushroom$stalk_surface_below_ring <- as.numeric(mushroom$cap_shape)
mushroom$stalk_color_above_ring <- as.numeric(mushroom$stalk_color_above_ring)
mushroom$stalk_color_below_ring <- as.numeric(mushroom$stalk_color_below_ring)
mushroom$veil_color <- as.numeric(mushroom$veil_color)
mushroom$ring_number <- as.numeric(mushroom$ring_number)
mushroom$ring_type <- as.numeric(mushroom$ring_type)
mushroom$spore_print_color <- as.numeric(mushroom$spore_print_color)
mushroom$population <- as.numeric(mushroom$population)
mushroom$habitat <- as.numeric(mushroom$habitat)
scale(mushroom, center = TRUE, scale = TRUE)
scale(mushroom[,2:23], center = TRUE, scale = TRUE)
scale(mushroom$habitat, center = TRUE, scale = TRUE)
scale(as.numeric(mushroom$habitat), center = TRUE, scale = TRUE)
#install.packages("Amelia")
#library(Amelia)
columnNames <- c(
"class", "cap_shape", "cap_surface",
"cap_color", "bruises", "odor",
"gill_attachement", "gill_spacing", "gill_size",
"gill_color", "stalk_shape", "stalk_root",
"stalk_surface_above_ring", "stalk_surface_below_ring", "stalk_color_above_ring",
"stalk_color_below_ring", "veil_type", "veil_color",
"ring_number", "ring_type", "spore_print_color",
"population", "habitat")
#include dataset from disk
mushroom <- read.table("agaricus-lepiota.data",
sep = ",",
na.strings = "?",
colClasses = NA,
header = FALSE,
col.names= columnNames
) # there are missing value so it gets warning
#unique(mushroom$veil_type)
#missmap(mushroom, main = "Missing values vs observed")
#replace NA values to columns mode
Mode <- function (x, na.rm) {
xtab <- table(x)
xmode <- names(which(xtab == max(xtab)))
if (length(xmode) > 1) xmode <- ">1 mode"
return(xmode)
}
for (var in 1:ncol(mushroom)) {
mushroom[is.na(mushroom[,var]),var] <- Mode(mushroom[,var], na.rm = TRUE)
}
#after data preparation of missing values.
#missmap(mushroom, main = "After data preparation of missing values")
drops <- c("veil_type") #there is one unique values of veil_type, we can remove this column in our dataset.
mushroom <- mushroom[ , !(names(mushroom) %in% drops)] #remove veil_type
#head(mushroom) # without numeric values, pure non preparing
mushroom$cap_shape <- scale(as.numeric(mushroom$cap_shape), center = TRUE, scale = TRUE)
mushroom$cap_surface <- scale(as.numeric(mushroom$cap_surface), center = TRUE, scale = TRUE)
mushroom$cap_color <- scale(as.numeric(mushroom$cap_color), center = TRUE, scale = TRUE)
mushroom$bruises <- scale(as.numeric(mushroom$bruises), center = TRUE, scale = TRUE)
mushroom$odor <- scale(as.numeric(mushroom$odor), center = TRUE, scale = TRUE)
mushroom$gill_attachement <-scale(as.numeric(mushroom$gill_attachement), center = TRUE, scale = TRUE)
mushroom$gill_spacing <- scale(as.numeric(mushroom$gill_spacing), center = TRUE, scale = TRUE)
mushroom$gill_size <- scale(as.numeric(mushroom$gill_size), center = TRUE, scale = TRUE)
mushroom$gill_color <- scale(as.numeric(mushroom$gill_color), center = TRUE, scale = TRUE)
mushroom$stalk_shape <- scale(as.numeric(mushroom$stalk_shape), center = TRUE, scale = TRUE)
mushroom$stalk_root <- scale(as.numeric(mushroom$stalk_root), center = TRUE, scale = TRUE)
mushroom$stalk_surface_above_ring <- scale(as.numeric(mushroom$stalk_surface_above_ring), center = TRUE, scale = TRUE)
mushroom$stalk_surface_below_ring <- scale(as.numeric(mushroom$stalk_surface_below_ring), center = TRUE, scale = TRUE)
mushroom$stalk_color_above_ring <- scale(as.numeric(mushroom$stalk_color_above_ring), center = TRUE, scale = TRUE)
mushroom$stalk_color_below_ring <- scale(as.numeric(mushroom$stalk_color_below_ring), center = TRUE, scale = TRUE)
mushroom$veil_color <- scale(as.numeric(mushroom$veil_color), center = TRUE, scale = TRUE)
mushroom$ring_number <- scale(as.numeric(mushroom$ring_number), center = TRUE, scale = TRUE)
mushroom$ring_type <- scale(as.numeric(mushroom$ring_type), center = TRUE, scale = TRUE)
mushroom$spore_print_color <- scale(as.numeric(mushroom$spore_print_color), center = TRUE, scale = TRUE)
mushroom$population <- scale(as.numeric(mushroom$population), center = TRUE, scale = TRUE)
mushroom$habitat <- scale(as.numeric(mushroom$habitat), center = TRUE, scale = TRUE)
View(mushroom)
head(mushroom)
#head(mushroom) # list the dataset after fill missing values, categoricial to numericial, and normalization.
# remove unncessary data
rm(columnNames,drops,var,Mode)
#head(mushroom) # list the dataset after fill missing values, categoricial to numericial, and normalization.
# remove unncessary data
rm(columnNames,drops,var,Mode,mush)
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
#show current dataset
head(mushroom)
summary(mushroom)
#begin the logistic function
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mush), size=nrow(mush)*0.8) # randomly choice rows
train_index <- sample(1:nrow(mushroom), size=nrow(mush)*0.8) # randomly choice rows
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
try1 = glm(formula = class ~ ., data = mushroom, family = "binomial")
summary(try1)
try1 = bayesglm(formula = class ~ ., data = mushroom, family = "binomial")
library(arm)
try1 = bayesglm(formula = class ~ ., data = mushroom, family = "binomial")
summary(try1)
display(try1, digits = 4)
try1 = bayesglm(formula = class ~ ., data = mushroom, family = "binomial")
summary(try1)
display(try1)
glm.probs <- predict(try1, type = "response")
glm.probs[1:5]
glm.pred <- ifelse(glm.probs > 7, "Poison", "edibility")
mean(glm.pred == edibility)
mean(glm.pred)
glm.pred
summary(glm.pred)
summary(try1)
fitted.results <- predict(mushroom,newdata=subset(test,select=c(2,3,4,5,6,7,8)),type='response')
misClasificError <- mean(glm.probs != mushroom$edibility)
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
misClasificError <- mean(glm.pred != mushroom$edibility)
glm.pred  <- ifelse(fitted.results > 0.5,p,e)
glm.pred  <- ifelse(glm.probs > 0.5,p,e)
glm.pred  <- ifelse(glm.probs > 0.5,"p","e")
misClasificError <- mean(glm.pred != mushroom$edibility)
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
#begin the logistic function
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
library(arm)
try1 = bayesglm(formula = class ~ ., data = mushroom, family = "binomial")
glm.probs <- predict(try1, type = "response")
glm.probs[1:5]
glm.pred  <- ifelse(glm.probs > 0.5,"p","e")
glm.pred
misClasificError <- mean(glm.pred != mushroom$edibility)
print(paste('Accuracy',1-misClasificError))
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
misClasificError <- mean(glm.pred != mushroom$class)
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
#begin the logistic function
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
try1 = bayesglm(formula = class ~ ., data = mushroom, family = "binomial")
glm.probs <- predict(try1, type = "response")
glm.pred  <- ifelse(glm.probs > 0.5,"p","e")
misClasificError <- mean(glm.pred != mushroom$class)
print(paste('Accuracy',1-misClasificError))
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
#begin the logistic function
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
library(arm)
try1 = bayesglm(formula = class ~ ., data = train, family = "binomial")
glm.probs <- predict(try1, type = "response")
glm.pred  <- ifelse(glm.probs > 0.5,"p","e")
misClasificError <- mean(glm.pred != mushroom$class)
misClasificError <- mean(glm.pred != train$class)
print(paste('Accuracy',1-misClasificError))
anova(model, test="Chisq")
anova(mushroom, test="Chisq")
#Assessing the predictive ability of the model
fitted.results <- predict(mushroom,newdata=subset(test,select=c(2:23)),type='response')
#Assessing the predictive ability of the model
fitted.results <- predict(try1,newdata=subset(test,select=c(2:23)),type='response')
#Assessing the predictive ability of the model
fitted.results <- predict(try1,newdata=subset(test,select=c(2,3,4,5,6,7,8)),type='response')
View(mushroom)
View(try1)
View(try1)
#Assessing the predictive ability of the model
fitted.results <- predict(try1,newdata=subset(test,select=c(2,3,4,5,6,7,8,9)),type='response')
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
glm.probs <- predict(try1, type = "response")
glm.pred  <- ifelse(glm.probs > 0.5,"p","e")
misClasificError <- mean(glm.pred != train$class)
print(paste('Accuracy',1-misClasificError))
#Assessing the predictive ability of the model
fitted.results <- predict(try1,newdata=subset(test,select=c(2,3,4,5,6,7,8,9)),type='response')
#Assessing the predictive ability of the model
fitted.results <- predict(try1,newdata=subset(test,select=c(2:20)),type='response')
#Assessing the predictive ability of the model
fitted.results <- predict(try1,newdata=subset(test,select=c(2:21)),type='response')
View(test)
#Assessing the predictive ability of the model
fitted.results <- predict(try1,newdata=subset(test,type='response')
#Assessing the predictive ability of the model
fitted.results <- predict(try1,newdata=subset(test,type='response')
#Assessing the predictive ability of the model
fitted.results <- predict(try1,newdata=subset(test,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
