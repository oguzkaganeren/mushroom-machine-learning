test  <- mushroom[-temp_index,]
train <- mushroom[temp_index,]
start_time <- Sys.time()
model = glm(formula = gill_attachment ~ ., data = train, family = binomial())
#summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(gill_attachment ~ ., data = train,family = binomial,maxit = 100)
#summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-7],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
predicted <- gsub("FALSE","a",predicted)
predicted <- gsub("TRUE","f",predicted)
actual <- test[,5]
train_err <- mean(predicted != train$gill_attachment)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
Recall <- TP*100/(TP+FN)
F_Score <- 2*TP*100/(2*TP+FP+FN)
Precision <- TP*100/(TP+FP)
end_time <- Sys.time()
AccList <- c(AccList, Accuracy)
RecList <- c(RecList, Recall)
FscList <- c(FscList, F_Score)
PrcList <- c(PrcList, Precision)
print(paste(i, "-> running time => ", (end_time-start_time), "Accuracy : ", Accuracy,
" Recall : ", Recall
," F-Score : ", F_Score
," Precision : ", Precision))
}
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE) # load dataset
summary(mushroom)
head(mushroom)
class_count <- table(mushrooms$class)
class_count <- table(mushroom$class)
class_count
class_count <- table(mushroom$class)
class_proportion <- class_count[2]/(class_count[1]+class_count[2])
print("Natural poison rate->")
class_proportion
View(proportions_tab)
View(mushroom)
class_count <- table(mushroom$bruises)
class_proportion <- class_count[2]/(class_count[1]+class_count[2])
print("Natural buises rate->")
class_proportion
ComputeProportion <- function(target,attribute_dataset,Columns,centroid){
len_attr <- length(Columns)
RMSE <- NULL
for(i in 1:len_attr){
tab <- table(target,attribute_dataset[,Columns[i]])
prop <- tab[2,]/(tab[1,]+tab[2,])
centr_prop <- prop - centroid
Err <- sqrt(mean(centr_prop*centr_prop))
RMSE <-rbind(RMSE,Err)
}
norm_err <- (RMSE-min(RMSE))/(max(RMSE)-min(RMSE))
err_mat <- cbind(colnames(mushroom[,Columns]),RMSE)
err_mat <- cbind(err_mat,norm_err)
colnames(err_mat) <- c("Column name","RMSE","Norm. Error")
err_mat
}
col<-c(2:23)
secondCol<-c(1:23)
secondCol<-secondCol[-4]
proportions_tab <- ComputeProportion(mushroom[,1],mushroom,col,0.482)
print(proportions_tab)
proportions_tab <- ComputeProportion(mushroom[,5],mushroom,secondCol,0.415)
print(proportions_tab)
View(mushroom)
sums <- NULL
for(i in 1:length(mushroom)){
sums <- c(sums, sum(is.na(mushroom[,i])))
}
numMissData <- data.frame("column" = columnNames, "numberOfMissingData" = sums )
missmap(mushroom, main = "Missing values vs observed") # plot missing data distrubition
numMissData <- data.frame("numberOfMissingData" = sums )
sums <- NULL
for(i in 1:length(mushroom)){
sums <- c(sums, sum(is.na(mushroom[,i])))
}
numMissData <- data.frame("numberOfMissingData" = sums )
missmap(mushroom, main = "Missing values vs observed") # plot missing data distrubition
#show missing data in a table
library(Amelia)
sums <- NULL
for(i in 1:length(mushroom)){
sums <- c(sums, sum(is.na(mushroom[,i])))
}
numMissData <- data.frame("numberOfMissingData" = sums )
missmap(mushroom, main = "Missing values vs observed") # plot missing data distrubition
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE) # load dataset
library(Amelia)
sums <- NULL
for(i in 1:length(mushroom)){
sums <- c(sums, sum(is.na(mushroom[,i])))
}
numMissData <- data.frame("numberOfMissingData" = sums )
missmap(mushroom, main = "Missing values vs observed") # plot missing data distrubition
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE) # load dataset
#show missing data in a table
library(Amelia)
sums <- NULL
for(i in 1:length(mushroom)){
sums <- c(sums, sum(is.na(mushroom[,i])))
}
numMissData <- data.frame("numberOfMissingData" = sums )
missmap(mushroom, main = "Missing values vs observed") # plot missing data distrubition
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE) # load dataset
missmap(mushroom, main = "Missing values vs observed") # plot missing data distrubition
missmap(mushroom, main = "Missing values vs observed") # plot missing data distrubition
columnNames <- c(
"class", "cap_shape", "cap_surface",
"cap_color", "bruises", "odor",
"gill_attachement", "gill_spacing", "gill_size",
"gill_color", "stalk_shape", "stalk_root",
"stalk_surface_above_ring", "stalk_surface_below_ring", "stalk_color_above_ring",
"stalk_color_below_ring", "veil_color",
"ring_number", "ring_type", "spore_print_color",
"population", "habitat")
library(Amelia)
sums <- NULL
for(i in 1:length(mushroom)){
sums <- c(sums, sum(is.na(mushroom[,i])))
}
numMissData <- data.frame("column" = columnNames,"numberOfMissingData" = sums )
missmap(mushroom, main = "Missing values vs observed") # plot missing data distrubition
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE) # load dataset
columnNames <- c(
"class", "cap_shape", "cap_surface",
"cap_color", "bruises", "odor",
"gill_attachement", "gill_spacing", "gill_size",
"gill_color", "stalk_shape", "stalk_root",
"stalk_surface_above_ring", "stalk_surface_below_ring", "stalk_color_above_ring",
"stalk_color_below_ring", "veil_color",
"ring_number", "ring_type", "spore_print_color",
"population", "habitat")
library(Amelia)
sums <- NULL
for(i in 1:length(mushroom)){
sums <- c(sums, sum(is.na(mushroom[,i])))
}
numMissData <- data.frame("column" = columnNames,"numberOfMissingData" = sums )
library(Amelia)
sums <- NULL
for(i in 1:length(mushroom)){
sums <- c(sums, sum(is.na(mushroom[,i])))
}
numMissData <- data.frame("numberOfMissingData" = sums )
missmap(mushroom, main = "Missing values vs observed") # plot missing data distrubition
#show missing data in a table
any(is.na(mushroom))
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE,na.strings=c("",".","NA")) # load dataset
#show missing data in a table
any(is.na(mushroom))
View(mushroom)
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE,na.strings=c("","?","NA")) # load dataset
#show missing data in a table
any(is.na(mushroom))
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE,na.strings=c("?","NA")) # load dataset
#show missing data in a table
any(is.na(mushroom))
missmap(mushroom, main = "Missing values vs observed") # plot missing data distrubition
missmap(mushroom, main = "Missing values vs observed") # plot missing data distrubition
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE,na.strings=c("?","NA")) # load dataset
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
#----------------Gill_attachment
TRAIN_SIZE  = 0.8
NUM_OF_FOLD = 10
TRAIN_DATA  = list()
#show current dataset
#head(mushroom)
#summary(mushroom)
set.seed(5)  #Set the seed for reproducibility
for(i in 1:(NUM_OF_FOLD+1)){
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*TRAIN_SIZE) # randomly choice rows
TRAIN_DATA <- c(TRAIN_DATA, list(train_index))
}
#begin the logistic function (Model fitting)
AccList <- NULL
RecList <- NULL
FscList <- NULL
PrcList <- NULL
for(i in 1:(NUM_OF_FOLD)){
temp_index <- unlist(TRAIN_DATA[i])
test  <- mushroom[-temp_index,]
train <- mushroom[temp_index,]
start_time <- Sys.time()
model = glm(formula = gill_attachment ~ ., data = train, family = binomial())
#summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(gill_attachment ~ ., data = train,family = binomial,maxit = 100)
#summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-7],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
predicted <- gsub("FALSE","a",predicted)
predicted <- gsub("TRUE","f",predicted)
actual <- test[,5]
train_err <- mean(predicted != train$gill_attachment)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
Recall <- TP*100/(TP+FN)
F_Score <- 2*TP*100/(2*TP+FP+FN)
Precision <- TP*100/(TP+FP)
end_time <- Sys.time()
AccList <- c(AccList, Accuracy)
RecList <- c(RecList, Recall)
FscList <- c(FscList, F_Score)
PrcList <- c(PrcList, Precision)
print(paste(i, "-> running time => ", (end_time-start_time), "Accuracy : ", Accuracy,
" Recall : ", Recall
," F-Score : ", F_Score
," Precision : ", Precision))
}
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
View(mushroom)
TRAIN_SIZE  = 0.8
NUM_OF_FOLD = 10
TRAIN_DATA  = list()
set.seed(5)  #Set the seed for reproducibility
for(i in 1:(NUM_OF_FOLD+1)){
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*TRAIN_SIZE) # randomly choice rows
TRAIN_DATA <- c(TRAIN_DATA, list(train_index))
}
#begin the logistic function (Model fitting)
AccList <- NULL
RecList <- NULL
FscList <- NULL
PrcList <- NULL
for(i in 1:(NUM_OF_FOLD)){
temp_index <- unlist(TRAIN_DATA[i])
test  <- mushroom[-temp_index,]
train <- mushroom[temp_index,]
start_time <- Sys.time()
model = glm(formula = gill_attachment ~ ., data = train, family = binomial())
#summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(gill_attachment ~ ., data = train,family = binomial,maxit = 100)
#summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-7],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
predicted <- gsub("FALSE","a",predicted)
predicted <- gsub("TRUE","f",predicted)
actual <- test[,5]
train_err <- mean(predicted != train$gill_attachment)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
Recall <- TP*100/(TP+FN)
F_Score <- 2*TP*100/(2*TP+FP+FN)
Precision <- TP*100/(TP+FP)
end_time <- Sys.time()
AccList <- c(AccList, Accuracy)
RecList <- c(RecList, Recall)
FscList <- c(FscList, F_Score)
PrcList <- c(PrcList, Precision)
print(paste(i, "-> running time => ", (end_time-start_time), "Accuracy : ", Accuracy,
" Recall : ", Recall
," F-Score : ", F_Score
," Precision : ", Precision))
}
View(mushroom)
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
TRAIN_SIZE  = 0.8
NUM_OF_FOLD = 10
TRAIN_DATA  = list()
set.seed(5)  #Set the seed for reproducibility
for(i in 1:(NUM_OF_FOLD+1)){
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*TRAIN_SIZE) # randomly choice rows
TRAIN_DATA <- c(TRAIN_DATA, list(train_index))
}
#begin the logistic function (Model fitting)
AccList <- NULL
RecList <- NULL
FscList <- NULL
PrcList <- NULL
for(i in 1:(NUM_OF_FOLD)){
temp_index <- unlist(TRAIN_DATA[i])
test  <- mushroom[-temp_index,]
train <- mushroom[temp_index,]
start_time <- Sys.time()
model = glm(formula = gill_attachment ~ ., data = train, family = binomial())
#summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(gill_attachment ~ ., data = train,family = binomial,maxit = 100)
#summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-7],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
predicted <- gsub("FALSE","a",predicted)
predicted <- gsub("TRUE","f",predicted)
actual <- test[,5]
train_err <- mean(predicted != train$gill_attachment)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
Recall <- TP*100/(TP+FN)
F_Score <- 2*TP*100/(2*TP+FP+FN)
Precision <- TP*100/(TP+FP)
end_time <- Sys.time()
AccList <- c(AccList, Accuracy)
RecList <- c(RecList, Recall)
FscList <- c(FscList, F_Score)
PrcList <- c(PrcList, Precision)
print(paste(i, "-> running time => ", (end_time-start_time), "Accuracy : ", Accuracy,
" Recall : ", Recall
," F-Score : ", F_Score
," Precision : ", Precision))
}
missmap(mushroom, main = "Missing values vs observed") # plot missing data distrubition
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE,na.strings=c("?","NA")) # load dataset
#replace NA values to columns mode
Mode <- function (x, na.rm) {
xtab <- table(x)
xmode <- names(which(xtab == max(xtab)))
if (length(xmode) > 1) xmode <- ">1 mode"
return(xmode)
}
for (var in 1:ncol(mushroom)) {
mushroom[is.na(mushroom[,var]),var] <- Mode(mushroom[,var], na.rm = TRUE)
}
#--------------------
#doğal değerlerini buluyoruz proportion kısmında lazım olacak
class_count <- table(mushroom$class)
class_proportion <- class_count[2]/(class_count[1]+class_count[2])
print("Natural poison rate->")
class_proportion
class_count <- table(mushroom$bruises)
class_proportion <- class_count[2]/(class_count[1]+class_count[2])
print("Natural buises rate->")
class_proportion
#dönen değer ne kadar büyükse sınıflandırma için o kadar önemlidir.
#columns target dışında yer alan diğer attributesları alır
#parametre olarak verilen centroid değeri dogal posion değeridir
ComputeProportion <- function(target,attribute_dataset,Columns,centroid){
len_attr <- length(Columns)
RMSE <- NULL
for(i in 1:len_attr){
tab <- table(target,attribute_dataset[,Columns[i]])
prop <- tab[2,]/(tab[1,]+tab[2,])
centr_prop <- prop - centroid
Err <- sqrt(mean(centr_prop*centr_prop))
RMSE <-rbind(RMSE,Err)
}
norm_err <- (RMSE-min(RMSE))/(max(RMSE)-min(RMSE))
err_mat <- cbind(colnames(mushroom[,Columns]),RMSE)
err_mat <- cbind(err_mat,norm_err)
colnames(err_mat) <- c("Column name","RMSE","Norm. Error")
err_mat
}
col<-c(2:23)
secondCol<-c(1:23)
secondCol<-secondCol[-4]
proportions_tab <- ComputeProportion(mushroom[,1],mushroom,col,0.482)
print(proportions_tab)
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE,na.strings=c("?","NA")) # load dataset
ComputeProportion <- function(target,attribute_dataset,Columns,centroid){
len_attr <- length(Columns)
RMSE <- NULL
for(i in 1:len_attr){
tab <- table(target,attribute_dataset[,Columns[i]])
prop <- tab[2,]/(tab[1,]+tab[2,])
centr_prop <- prop - centroid
Err <- sqrt(mean(centr_prop*centr_prop))
RMSE <-rbind(RMSE,Err)
}
norm_err <- (RMSE-min(RMSE))/(max(RMSE)-min(RMSE))
err_mat <- cbind(colnames(mushroom[,Columns]),RMSE)
err_mat <- cbind(err_mat,norm_err)
colnames(err_mat) <- c("Column name","RMSE","Norm. Error")
err_mat
}
col<-c(2:23)
secondCol<-c(1:23)
secondCol<-secondCol[-4]
proportions_tab <- ComputeProportion(mushroom[,1],mushroom,col,0.482)
boxplot(proportions_tab)
proportions_tab
proportions_tab[[1]]
proportions_tab[1]
typeof(proportions_tab)
proportions_tab[,1:2]
proportions_tab[,1]
boxplot(proportions_tab[,1],proportions_tab[,3])
boxplot(proportions_tab[,3])
proportions_tab[,3]
plot(mushroom$gill_attachment)
plot(proportions_tab[,3])
plot(proportions_tab[,3])
plot(proportions_tab)
barplot(proportions_tab)
barplot(proportions_tab[,3])
barplot(proportions_tab[,3],main=proportions_tab)
plot(proportions_tab[,3])
plot(proportions_tab[,3],labels=proportions_tab[,2])
plot(proportions_tab[,3],labels=c("Mon", "Tue", "Wed", "Thu", "Fri"))
plot(proportions_tab[,3])
plot(proportions_tab[,3],axes=FALSE, ann=FALSE)
plot(proportions_tab[,3],axes=FALSE, ann=FALSE)
plot(proportions_tab[,3],at=1:5, lab=c("Mon","Tue","Wed","Thu","Fri"))
plot(proportions_tab[,3],at=1:5, lab=proportions_tab[,2])
plot(proportions_tab[,3],at=1:length(proportions_tab[,2]), lab=proportions_tab[,2])
plot(proportions_tab[,3],lab=proportions_tab[,2])
length(proportions_tab[,3])
length(proportions_tab[,2])
print(lab=proportions_tab[,2])
print(proportions_tab[,2])
print(proportions_tab[,1])
plot(proportions_tab[,3],lab=proportions_tab[,1])
barplot(proportions_tab[,3], main="Cars", xlab="Days",
ylab="Total", names.arg=lab=proportions_tab[,1],
border="blue", density=c(10,20,30,40,50))
barplot(proportions_tab[,3], main="Cars", xlab="Days",
ylab="Total", names.arg=lab=proportions_tab[,1])
barplot(proportions_tab[,3], main="Cars", xlab="Days",
ylab="Total", names.arg=lab=proportions_tab[,1],
border="blue", density=c(10,20,30,40,50))
barplot(proportions_tab[,3], main="Cars", xlab="Days",
ylab="Total", names.arg=lab=proportions_tab[,1],
border="blue")
barplot(proportions_tab[,3], xlab="Days",
ylab="Total", names.arg=proportions_tab[,1],
border="blue")
proportions_tab[,3]
as.numeric(proportions_tab[,3])
barplot(as.numeric(proportions_tab[,3]), xlab="Days",
ylab="Total", names.arg=proportions_tab[,1],
border="blue")
barplot(as.numeric(proportions_tab[,3]), xlab="Importance Level",
names.arg=proportions_tab[,1],
border="blue")
barplot(as.numeric(proportions_tab[,3]), xlab="Importance Level",
names.arg=proportions_tab[,1],
border="blue",fill=rainbow(5))
barplot(as.numeric(proportions_tab[,3]), xlab="Importance Level",
names.arg=proportions_tab[,1],
border="blue",fill=rainbow(22))
barplot(as.numeric(proportions_tab[,3]), xlab="Importance Level",
names.arg=proportions_tab[,1],
border="blue", col=rainbow(5))
barplot(as.numeric(proportions_tab[,3]), xlab="Importance Level",
names.arg=proportions_tab[,1],
border="blue", col=rainbow(2))
barplot(as.numeric(proportions_tab[,3]), xlab="Importance Level",
names.arg=proportions_tab[,1],
border="blue", col=rainbow(3))
barplot(as.numeric(proportions_tab[,3]), xlab="Importance Level",
names.arg=proportions_tab[,1],
border="blue", col=rainbow(3),las=2)
barplot(as.numeric(proportions_tab[,3]), ylab="Importance Level",
names.arg=proportions_tab[,1],
border="blue", col=rainbow(3),las=2)
barplot(as.numeric(proportions_tab[,3]), ylab="Importance Level for edibility",
names.arg=proportions_tab[,1],
border="blue", col=rainbow(3),las=2)
View(mushroom)
proportions_tab <- ComputeProportion(mushroom[,5],mushroom,secondCol,0.415)
print(proportions_tab)
barplot(as.numeric(proportions_tab[,3]), ylab="Importance Level for bruises",
names.arg=proportions_tab[,1],
border="blue", col=rainbow(3),las=2)
