#start_time <- Sys.time()
model = glm(formula = odor ~ ., data = train, family = binomial())
summary(model)
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
model <- glm(odor ~ ., data = train,family = binomial,maxit = 100)
summary(model)
predicted <- predict.glm(model,newdata = test[,-6],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
actual <- test[,6]
train_err <- mean(predicted != train$odor)
set.seed(15482)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*TRAIN_SIZE) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
#start_time <- Sys.time()
model = glm(formula = bruises ~ ., data = train, family = binomial())
summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(bruises ~ ., data = train,family = binomial,maxit = 100)
summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-5],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
predicted <- gsub("TRUE","t",predicted)
predicted <- gsub("FALSE","f",predicted)
actual <- test[,5]
train_err <- mean(predicted != train$bruises)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
print(Accuracy)
Recall <- TP*100/(TP+FN)
print(Recall)
F_Score <- 2*TP*100/(2*TP+FP+FN)
print(F_Score)
Precision <- TP*100/(TP+FP)
print(Precision)
class_count <- table(mushrooms$bruises)
class_proportion <- class_count[2]/(class_count[1]+class_count[2])
print("Proportion of poisonous mushrooms occuring naturally is::")
print(class_proportion)
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE) # load dataset
class_count <- table(mushrooms$bruises)
class_proportion <- class_count[2]/(class_count[1]+class_count[2])
print("Proportion of poisonous mushrooms occuring naturally is::")
print(class_proportion)
class_count <- table(mushroom$bruises)
class_proportion <- class_count[2]/(class_count[1]+class_count[2])
print("Proportion of poisonous mushrooms occuring naturally is::")
print(class_proportion)
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
TRAIN_SIZE  = 0.8
#NUM_OF_FOLD = 10
#TRAIN_DATA  = list()
#show current dataset
#head(mushroom)
#summary(mushroom)
#begin the logistic function (Model fitting)
set.seed(15482)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*TRAIN_SIZE) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
#start_time <- Sys.time()
model = glm(formula = bruises ~ ., data = train, family = binomial())
summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(bruises ~ ., data = train,family = binomial,maxit = 100)
summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-5],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.4
predicted <- gsub("TRUE","t",predicted)
predicted <- gsub("FALSE","f",predicted)
actual <- test[,5]
train_err <- mean(predicted != train$bruises)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
print(Accuracy)
#şimdi modeli test datamız üzerinde test ediyoruz
test[,-5]
#begin the logistic function (Model fitting)
set.seed(15482)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*TRAIN_SIZE) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
#start_time <- Sys.time()
model = glm(formula = bruises ~ ., data = train, family = binomial())
summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(bruises ~ ., data = train,family = binomial,maxit = 100)
summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-5],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
predicted <- gsub("TRUE","t",predicted)
predicted <- gsub("FALSE","f",predicted)
actual <- test[,5]
train_err <- mean(predicted != train$bruises)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
print(Accuracy)
TRAIN_SIZE  = 0.7
#NUM_OF_FOLD = 10
#TRAIN_DATA  = list()
#show current dataset
#head(mushroom)
#summary(mushroom)
#begin the logistic function (Model fitting)
set.seed(15482)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*TRAIN_SIZE) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
#start_time <- Sys.time()
model = glm(formula = bruises ~ ., data = train, family = binomial())
summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(bruises ~ ., data = train,family = binomial,maxit = 100)
summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-5],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
predicted <- gsub("TRUE","t",predicted)
predicted <- gsub("FALSE","f",predicted)
actual <- test[,5]
train_err <- mean(predicted != train$bruises)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
print(Accuracy)
TRAIN_SIZE  = 0.7
#NUM_OF_FOLD = 10
#TRAIN_DATA  = list()
#show current dataset
#head(mushroom)
#summary(mushroom)
#begin the logistic function (Model fitting)
set.seed(15482)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*TRAIN_SIZE) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
#start_time <- Sys.time()
model = glm(formula = bruises ~ ., data = train, family = binomial())
summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(bruises ~ ., data = train,family = binomial,maxit = 100)
summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-5],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
predicted <- gsub("TRUE","t",predicted)
predicted <- gsub("FALSE","f",predicted)
actual <- test[,5]
train_err <- mean(predicted != train$bruises)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
print(Accuracy)
TRAIN_SIZE  = 0.5
#NUM_OF_FOLD = 10
#TRAIN_DATA  = list()
#show current dataset
#head(mushroom)
#summary(mushroom)
#begin the logistic function (Model fitting)
set.seed(15482)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*TRAIN_SIZE) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
#start_time <- Sys.time()
model = glm(formula = bruises ~ ., data = train, family = binomial())
summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(bruises ~ ., data = train,family = binomial,maxit = 100)
summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-5],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
predicted <- gsub("TRUE","t",predicted)
predicted <- gsub("FALSE","f",predicted)
actual <- test[,5]
train_err <- mean(predicted != train$bruises)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
print(Accuracy)
Recall <- TP*100/(TP+FN)
print(Recall)
F_Score <- 2*TP*100/(2*TP+FP+FN)
print(F_Score)
Precision <- TP*100/(TP+FP)
print(Precision)
View(mushroom)
View(train)
actual
TRAIN_SIZE  = 0.5
#NUM_OF_FOLD = 10
#TRAIN_DATA  = list()
#show current dataset
#head(mushroom)
#summary(mushroom)
#begin the logistic function (Model fitting)
set.seed(15482)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*TRAIN_SIZE) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
#start_time <- Sys.time()
model = glm(formula = bruises ~ ., data = train, family = binomial())
summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(bruises ~ ., data = train,family = binomial,maxit = 100)
summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-5],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
predicted <- gsub("TRUE","f",predicted)
predicted <- gsub("FALSE","t",predicted)
actual <- test[,5]
train_err <- mean(predicted != train$bruises)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
print(Accuracy)
TRAIN_SIZE  = 0.5
#NUM_OF_FOLD = 10
#TRAIN_DATA  = list()
#show current dataset
#head(mushroom)
#summary(mushroom)
#begin the logistic function (Model fitting)
set.seed(15482)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*TRAIN_SIZE) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
#start_time <- Sys.time()
model = glm(formula = bruises ~ ., data = train, family = binomial())
summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(bruises ~ ., data = train,family = binomial,maxit = 100)
summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-5],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
actual <- test[,5]
train_err <- mean(predicted != train$bruises)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
print(Accuracy)
set.seed(15482)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*TRAIN_SIZE) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
#start_time <- Sys.time()
model = glm(formula = bruises ~ ., data = train, family = binomial())
summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(bruises ~ ., data = train,family = binomial,maxit = 100)
summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-5],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
predicted <- gsub("FALSE","f",predicted)
predicted <- gsub("TRUE","t",predicted)
actual <- test[,5]
train_err <- mean(predicted != train$bruises)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
print(Accuracy)
Recall <- TP*100/(TP+FN)
print(Recall)
predicted
TRAIN_SIZE  = 0.8
#NUM_OF_FOLD = 10
#TRAIN_DATA  = list()
#show current dataset
#head(mushroom)
#summary(mushroom)
#begin the logistic function (Model fitting)
set.seed(15482)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*TRAIN_SIZE) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
#start_time <- Sys.time()
model = glm(formula = bruises ~ ., data = train, family = binomial())
summary(model)
#NA değerler var, bunun sebebi birden fazla attribute un iyi bir şekilde eşleşmesi
#bu durumu istemiyoruz o yüzden NA'lı attributeları kaldırıyoruz
drops <- c("stalk_color_above_ring","stalk_color_below_ring","veil_color","ring_number"
,"ring_type","spore_print_color","habitat") #we remove this column in our dataset.
train <- train[ , !(names(train) %in% drops)] #remove
test <- test[ , !(names(test) %in% drops)] #remove
#Warning: glm.fit: algorithm did not converge hatası iterasyon sayısı ile ilgili
#default olarak maxit=25'dir biz 100 yapıyoruz
model <- glm(bruises ~ ., data = train,family = binomial,maxit = 100)
summary(model)
#şimdi modeli test datamız üzerinde test ediyoruz
predicted <- predict.glm(model,newdata = test[,-5],type = "response")
#tahmin edilen değerlerin 0.5 üzeri olanlar poison
predicted <- predicted >= 0.5
predicted <- gsub("FALSE","f",predicted)
predicted <- gsub("TRUE","t",predicted)
actual <- test[,5]
train_err <- mean(predicted != train$bruises)
confusion_matrix <- table(predicted,actual)
TP <- confusion_matrix[2,2]
TN <- confusion_matrix[1,1]
FP <- confusion_matrix[2,1]
FN <- confusion_matrix[1,2]
Accuracy <- (TP+TN)*100/(TP+TN+FP+FN)
print(Accuracy)
Recall <- TP*100/(TP+FN)
print(Recall)
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE) # load dataset
#replace NA values to columns mode
#Mode <- function (x, na.rm) {
#  xtab <- table(x)
#  xmode <- names(which(xtab == max(xtab)))
#  if (length(xmode) > 1) xmode <- ">1 mode"
#  return(xmode)
#}
#for (var in 1:ncol(mushroom)) {
#  mushroom[is.na(mushroom[,var]),var] <- Mode(mushroom[,var], na.rm = TRUE)
#}
#after data preparation of missing values.
#missmap(mushroom, main = "After data preparation of missing values")
#Centroid parametresi, en uygun oluşum değerini gösterir.
ComputeProportion <- function(target,attribute_dataset,Columns,centroid){
len_attr <- length(Columns)
RMSE <- NULL
for(i in 1:len_attr){
tab <- table(target,attribute_dataset[,Columns[i]])
prop <- tab[2,]/(tab[1,]+tab[2,])
centr_prop <- prop - centroid
Err <- sqrt(mean(centr_prop*centr_prop))
RMSE <-rbind(RMSE,Err)
}
norm_err <- (RMSE-min(RMSE))/(max(RMSE)-min(RMSE))
err_mat <- cbind(colnames(mushroom[,Columns]),RMSE)
err_mat <- cbind(err_mat,norm_err)
colnames(err_mat) <- c("Column name","RMSE","Norm. Error")
err_mat
}
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE) # load dataset
#replace NA values to columns mode
#Mode <- function (x, na.rm) {
#  xtab <- table(x)
#  xmode <- names(which(xtab == max(xtab)))
#  if (length(xmode) > 1) xmode <- ">1 mode"
#  return(xmode)
#}
#for (var in 1:ncol(mushroom)) {
#  mushroom[is.na(mushroom[,var]),var] <- Mode(mushroom[,var], na.rm = TRUE)
#}
#after data preparation of missing values.
#missmap(mushroom, main = "After data preparation of missing values")
#Centroid parametresi, en uygun oluşum değerini gösterir.
ComputeProportion <- function(target,attribute_dataset,Columns,centroid){
len_attr <- length(Columns)
RMSE <- NULL
for(i in 1:len_attr){
tab <- table(target,attribute_dataset[,Columns[i]])
prop <- tab[2,]/(tab[1,]+tab[2,])
centr_prop <- prop - centroid
Err <- sqrt(mean(centr_prop*centr_prop))
RMSE <-rbind(RMSE,Err)
}
norm_err <- (RMSE-min(RMSE))/(max(RMSE)-min(RMSE))
err_mat <- cbind(colnames(mushroom[,Columns]),RMSE)
err_mat <- cbind(err_mat,norm_err)
colnames(err_mat) <- c("Column name","RMSE","Norm. Error")
err_mat
}
secondCol<-c(1:23)
secondCol<-secondCol[-4]
#for second target
proportions_tab <- ComputeProportion(mushroom[,5],mushroom,secondCol,0.482)
print(proportions_tab)
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
library(ggplot2)
library(gridExtra)
install.packages("gridExtra")
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE) # load dataset
library(ggplot2)
library(gridExtra)
myplots <- list()  # new empty list
for (i in 1:ncol(mushroom)) {
p1 <- eval(substitute(
ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i]))
,list(i = i))
myplots[[i]] <- p1  # add each plot into plot list
#we plot the histograms of each category and split them into two graphs according to their edibility.
grid.arrange(myplots[[2]],myplots[[3]],myplots[[4]],myplots[[5]], ncol = 2)
#we plot the histograms of each category and split them into two graphs according to their edibility.
grid.arrange(myplots[[2]],myplots[[3]],myplots[[4]],myplots[[5]], ncol = 2)
grid.arrange(myplots[[6]],myplots[[7]],myplots[[8]],myplots[[9]], ncol = 2)
grid.arrange(myplots[[2]],myplots[[3]],myplots[[4]],myplots[[5]], ncol = 2)
grid.arrange(myplots[[6]],myplots[[7]],myplots[[8]],myplots[[9]], ncol = 2)
grid.arrange(myplots[[10]],myplots[[11]],myplots[[12]],myplots[[13]], ncol = 2)
grid.arrange(myplots[[14]],myplots[[15]],myplots[[16]],myplots[[17]], ncol = 2)
grid.arrange(myplots[[18]],myplots[[19]],myplots[[20]],myplots[[21]],myplots[[22]],myplots[[23]], ncol = 2)
mushroom <- read.csv("agaricus-lepiota.csv",header = TRUE) # load dataset
