l<-c()
i<-2
while(i<22) {
l[[i]] <- ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i])
i=i+1
}
grid.arrange(l[[1]],l[[3]],l[[4]],l[[5]],l[[6]], ncol = 2)
l[[2]]
grid.arrange(l[[2]],l[[3]],l[[4]],l[[5]],l[[6]], ncol = 2)
l[[2]]
l[[3]]
l[[4]]
grid.arrange(l[[2]],l[[3]],l[[4]],l[[5]],l[[6]], ncol = 2)
l[[2]]
l[2]
l[3]
mushroom[[2]]
mushroom[[3]]
View(mushroom)
View(mushroom)
mushroom[[4]]
View(mushroom)
View(mushroom)
l<-c()
i<-2
while(i<22) {
l[i] <- ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i])
i=i+1
}
l[3]
l[[4]]
l<-c()
i<-2
while(i<22) {
l[[i]] <- ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i])
i=i+1
}
l[[4]]
while(i<21) {
l[[i]] <- ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i])
i=i+1
}
l[[4]]
l<-c()
i<-2
while(i<22) {
l[[i]] <- ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i])
i=i+1
}
l[[5]]
l[[1]]
l[[2]]
grid.arrange(l[[2]],l[[3]],l[[4]],l[[5]],l[[6]], ncol = 2)
grid.arrange(l[[2]], ncol = 2)
grid.arrange(l[[3]], ncol = 2)
grid.arrange(l[[2]],l[[3]],l[[4]],l[[5]],l[[6]], ncol = 3)
l[[2]][[1]]
l
grid.arrange(l, ncol = 3)
l[[12]]
while(i<3) {
l[[i]] <- ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i])
i=i+1
}
l[[12]]
l<-c()
i<-2
while(i<3) {
l[[i]] <- ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i])
i=i+1
}
l[[2]]
l[[3]]
l<-c()
i<-2
while(i<4) {
l[[i]] <- ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i])
i=i+1
}
l[[3]]
l[[2]]
l[[3]]
l<-c()
i<-2
while(i<4) {
append(l, ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i]))
i=i+1
}
l[[3]]
l
l<-c()
i<-2
while(i<4) {
append(l, ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i]))
i=i+1
}
l<-c()
i<-2
while(i<4) {
l <- c(l,ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i]))
i=i+1
}
l[[3]]
l
myplots <- list()  # new empty list
for (i in 1:4) {
p1 <- eval(substitute(
ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i]))
,list(i = i)))
print(i)
print(p1)
myplots[[i]] <- p1  # add each plot into plot list
}
multiplot(plotlist = myplots, cols = 4)
myplots <- list()  # new empty list
for (i in 1:4) {
p1 <- eval(substitute(
ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i]))
,list(i = i))
print(i)
print(p1)
myplots[[i]] <- p1  # add each plot into plot list
}
myplots <- list()  # new empty list
for (i in 1:4) {
p1 <- eval(substitute(
ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i]))
,list(i = i))
myplots[[i]] <- p1  # add each plot into plot list
}
multiplot(plotlist = myplots, cols = 4)
myplots
grid.arrange(myplots[[2]],myplots[[3]], ncol = 3)
grid.arrange(myplots[[2]],myplots[[3]],myplots[[4]],myplots[[5]], ncol = 2)
myplots <- list()  # new empty list
for (i in 1:8) {
p1 <- eval(substitute(
ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i]))
,list(i = i))
myplots[[i]] <- p1  # add each plot into plot list
}
grid.arrange(myplots[[2]],myplots[[3]],myplots[[4]],myplots[[5]], ncol = 2)
grid.arrange(myplots[[2:8]] ncol = 2)
ncol(mushroom)
myplots <- list()  # new empty list
for (i in 1:ncol(mushroom)) {
p1 <- eval(substitute(
ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i]))
,list(i = i))
myplots[[i]] <- p1  # add each plot into plot list
}#my precious
grid.arrange(myplots[[2]],myplots[[3]],myplots[[4]],myplots[[5]], ncol = 2)
grid.arrange(myplots[[1]],myplots[[3]],myplots[[4]],myplots[[5]], ncol = 2)
grid.arrange(myplots[[2]],myplots[[3]],myplots[[4]],myplots[[5]], ncol = 2)
grid.arrange(myplots[[6]],myplots[[7]],myplots[[8]],myplots[[9]], ncol = 2)
grid.arrange(myplots[[10]],myplots[[11]],myplots[[12]],myplots[[13]], ncol = 2)
grid.arrange(myplots[[14]],myplots[[15]],myplots[[16]],myplots[[17]], ncol = 2)
grid.arrange(myplots[[18]],myplots[[19]],myplots[[20]],myplots[[21]], ncol = 2)
grid.arrange(myplots[[22]],myplots[[23]] ncol = 2)
grid.arrange(myplots[[22]] ncol = 2)
grid.arrange(myplots[[18]],myplots[[19]],myplots[[20]],myplots[[21]], ncol = 2)
myplots[[22]]
myplots[[23]]
grid.arrange(myplots[[18]],myplots[[19]],myplots[[20]],myplots[[21]],myplots[[22]],myplots[[23]], ncol = 2)
drops <- c("veil_type") #there is one unique values of veil_type, we can remove this column in our dataset.
mushroom <- mushroom[ , !(names(mushroom) %in% drops)] #remove veil_type
for (var in 1:ncol(mushroom)) {
mushroom[[var]] <- as.numeric( mushroom[[var]])
}
View(mushroom)
#install.packages("Amelia")
#library(Amelia)
columnNames <- c(
"class", "cap_shape", "cap_surface",
"cap_color", "bruises", "odor",
"gill_attachement", "gill_spacing", "gill_size",
"gill_color", "stalk_shape", "stalk_root",
"stalk_surface_above_ring", "stalk_surface_below_ring", "stalk_color_above_ring",
"stalk_color_below_ring", "veil_type", "veil_color",
"ring_number", "ring_type", "spore_print_color",
"population", "habitat")
#include dataset from disk
mushroom <- read.table("agaricus-lepiota.data",
sep = ",",
na.strings = "?",
colClasses = NA,
header = FALSE,
col.names= columnNames
)
#missmap(mushroom, main = "Missing values vs observed")
#replace NA values to columns mode
Mode <- function (x, na.rm) {
xtab <- table(x)
xmode <- names(which(xtab == max(xtab)))
if (length(xmode) > 1) xmode <- ">1 mode"
return(xmode)
}
for (var in 1:ncol(mushroom)) {
mushroom[is.na(mushroom[,var]),var] <- Mode(mushroom[,var], na.rm = TRUE)
}
#Analysis
library(ggplot2)
library(gridExtra)
myplots <- list()  # new empty list
for (i in 1:ncol(mushroom)) {
p1 <- eval(substitute(
ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i]))
,list(i = i))
myplots[[i]] <- p1  # add each plot into plot list
}#my precious
#we plot the histograms of each category and split them into two graphs according to their edibility.
grid.arrange(myplots[[2]],myplots[[3]],myplots[[4]],myplots[[5]], ncol = 2)
grid.arrange(myplots[[6]],myplots[[7]],myplots[[8]],myplots[[9]], ncol = 2)
grid.arrange(myplots[[10]],myplots[[11]],myplots[[12]],myplots[[13]], ncol = 2)
grid.arrange(myplots[[14]],myplots[[15]],myplots[[16]],myplots[[17]], ncol = 2)
grid.arrange(myplots[[18]],myplots[[19]],myplots[[20]],myplots[[21]],myplots[[22]],myplots[[23]], ncol = 2)
#after data preparation of missing values.
#missmap(mushroom, main = "After data preparation of missing values")
drops <- c("veil_type") #there is one unique values of veil_type, we can remove this column in our dataset.
mushroom <- mushroom[ , !(names(mushroom) %in% drops)] #remove veil_type
#head(mushroom) # without numeric values, pure non preparing
## categoric to numeric without target
for (var in 1:ncol(mushroom)) {
mushroom[[var]] <- as.numeric( mushroom[[var]])
}
#After the mode process, the graph
#head(mushroom)
#head(mushroom) # list the dataset after fill missing values, categoricial to numericial, and normalization.
# remove unncessary data
rm(columnNames,drops,var,Mode)
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
library(arm)
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
glm.probs <- predict(try1, type = "response")
glm.probs[1:5]
glm.pred  <- ifelse(glm.probs > 0.5,"p","e")
misClasificError <- mean(glm.pred != train$class)
print(paste('Accuracy',1-misClasificError))
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
library(arm)
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
View(train)
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
#begin the logistic function (Model fitting)
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
library(arm)
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
glm.probs <- predict(try1, type = "response")
glm.pred  <- ifelse(glm.probs > 0.5,"p","e")
misClasificError <- mean(glm.pred != train$class)
print(paste('Accuracy',1-misClasificError))
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
library(arm)
try1 = glm(formula = class ~ ., data = train, family=binomial(link='logit'))
glm.probs <- predict(try1, type = "response")
glm.probs[1:5]
glm.pred  <- ifelse(glm.probs > 0.5,"p","e")
misClasificError <- mean(glm.pred != train$class)
print(paste('Accuracy',1-misClasificError))
try1 = glmnet(formula = class ~ ., data = train, family=binomial(link='logit'))
install.packages("glmnet")
#install.packages("glmnet")
library(glmnet)
try1 = glmnet(formula = class ~ ., data = train, family=binomial(link='logit'))
try1 = glmnet( class,train, family=binomial(link='logit'))
try1 = glmnet( class,train)
x <- as.matrix(train[,-1]) # Removes class
y <- as.double(as.matrix(train[, 1])) # Only class
View(x)
y <- as.double(as.matrix(train[, 1])) # Only class
y <- as.matrix(train[, 1]) # Only class
try1 = glmnet( x,y)
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
#begin the logistic function (Model fitting)
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
x <- as.matrix(train[,-1]) # Removes class
y <- as.matrix(train[, 1]) # Only class
y <- as.double(as.matrix(train[, 1])) # Only class
try1 = glmnet( x,y)
glm.probs <- predict(try1, type = "response")
try1 = glmnet( x,y,family="binomial")
glm.probs <- predict(try1, type = "response")
newX <- model.matrix(~.-y,data=train)
glm.probs <- predict(try1, newx=newX)
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
#begin the logistic function (Model fitting)
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
library(arm)
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
for (var in 2:ncol(mushroom)) {
mushroom[[var]] <- as.numeric( mushroom[[var]])
}
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
library(arm)
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
glm.probs <- predict(try1, type = "response")
glm.probs[1:5]
glm.pred  <- ifelse(glm.probs > 0.5,"p","e")
misClasificError <- mean(glm.pred != train$class)
print(paste('Accuracy',1-misClasificError))
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'),control=glm.control(maxit=50))
glm.probs <- predict(try1, type = "response")
glm.probs[1:5]
glm.pred  <- ifelse(glm.probs > 0.5,"p","e")
misClasificError <- mean(glm.pred != train$class)
print(paste('Accuracy',1-misClasificError))
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
library(arm)
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
#install.packages("Amelia")
#library(Amelia)
columnNames <- c(
"class", "cap_shape", "cap_surface",
"cap_color", "bruises", "odor",
"gill_attachement", "gill_spacing", "gill_size",
"gill_color", "stalk_shape", "stalk_root",
"stalk_surface_above_ring", "stalk_surface_below_ring", "stalk_color_above_ring",
"stalk_color_below_ring", "veil_type", "veil_color",
"ring_number", "ring_type", "spore_print_color",
"population", "habitat")
#include dataset from disk
mushroom <- read.table("agaricus-lepiota.data",
sep = ",",
na.strings = "?",
colClasses = NA,
header = FALSE,
col.names= columnNames
)
#missmap(mushroom, main = "Missing values vs observed")
#replace NA values to columns mode
Mode <- function (x, na.rm) {
xtab <- table(x)
xmode <- names(which(xtab == max(xtab)))
if (length(xmode) > 1) xmode <- ">1 mode"
return(xmode)
}
for (var in 1:ncol(mushroom)) {
mushroom[is.na(mushroom[,var]),var] <- Mode(mushroom[,var], na.rm = TRUE)
}
#Analysis
library(ggplot2)
library(gridExtra)
myplots <- list()  # new empty list
for (i in 1:ncol(mushroom)) {
p1 <- eval(substitute(
ggplot(aes(x = mushroom[[i]]), data = mushroom) +
geom_histogram(stat = "count") +
facet_wrap(~class) +
xlab(colnames(mushroom)[i]))
,list(i = i))
myplots[[i]] <- p1  # add each plot into plot list
}#my precious
#we plot the histograms of each category and split them into two graphs according to their edibility.
grid.arrange(myplots[[2]],myplots[[3]],myplots[[4]],myplots[[5]], ncol = 2)
grid.arrange(myplots[[6]],myplots[[7]],myplots[[8]],myplots[[9]], ncol = 2)
grid.arrange(myplots[[10]],myplots[[11]],myplots[[12]],myplots[[13]], ncol = 2)
grid.arrange(myplots[[14]],myplots[[15]],myplots[[16]],myplots[[17]], ncol = 2)
grid.arrange(myplots[[18]],myplots[[19]],myplots[[20]],myplots[[21]],myplots[[22]],myplots[[23]], ncol = 2)
#after data preparation of missing values.
#missmap(mushroom, main = "After data preparation of missing values")
drops <- c("veil_type") #there is one unique values of veil_type, we can remove this column in our dataset.
mushroom <- mushroom[ , !(names(mushroom) %in% drops)] #remove veil_type
drops <- c("stalk_shape") #there is one unique values of veil_type, we can remove this column in our dataset.
mushroom <- mushroom[ , !(names(mushroom) %in% drops)] #remove veil_type
drops <- c("gill_attachment") #there is one unique values of veil_type, we can remove this column in our dataset.
mushroom <- mushroom[ , !(names(mushroom) %in% drops)] #remove veil_type
View(mushroom)
View(mushroom)
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
View(mushroom)
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
library(arm)
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
library(arm)
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
glm.probs <- predict(try1, type = "response")
glm.probs[1:5]
glm.pred  <- ifelse(glm.probs > 0.5,"p","e")
misClasificError <- mean(glm.pred != train$class)
print(paste('Accuracy',1-misClasificError))
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
library(arm)
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
#include data preparation file
source(file = "Preparation.R") # just shows worked dataset after data preparation.
#show current dataset
head(mushroom)
summary(mushroom)
#begin the logistic function (Model fitting)
set.seed(579642)  #Set the seed for reproducibility
train_index <- sample(1:nrow(mushroom), size=nrow(mushroom)*0.8) # randomly choice rows
test  <- mushroom[-train_index,]
train <- mushroom[train_index,]
library(arm)
try1 = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
glm.probs <- predict(try1, type = "response")
glm.probs[1:5]
glm.pred  <- ifelse(glm.probs > 0.5,"p","e")
misClasificError <- mean(glm.pred != train$class)
print(paste('Accuracy',1-misClasificError))
fitted.results <- predict(try1,newdata=subset(test),type='response')
fitted.results <- ifelse(fitted.results > 0.5,"p","e")
misClasificError <- mean(fitted.results != test$class)
print(paste('Accuracy',1-misClasificError))
#if we calculate the linear regression model, remove family part
pred = bayesglm(formula = class ~ ., data = train, family=binomial(link='logit'))
probs <- exp(pred)/(1+exp(pred)) #gives you probability that y=1 for each observation
probs <- exp(glm.probs)/(1+exp(glm.probs)) #gives you probability that y=1 for each observation
probs
glm.probs[1:5]
